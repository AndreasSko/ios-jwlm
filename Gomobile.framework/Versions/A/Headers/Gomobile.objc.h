// Objective-C API for talking to github.com/AndreasSko/go-jwlm/gomobile Go package.
//   gobind -lang=objc github.com/AndreasSko/go-jwlm/gomobile
//
// File is generated by gobind. Do not edit.

#ifndef __Gomobile_H__
#define __Gomobile_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class GomobileDatabaseStats;
@class GomobileDatabaseWrapper;
@class GomobileMergeConflict;
@class GomobileMergeConflictError;
@class GomobileMergeConflictsWrapper;

/**
 * DatabaseStats represents the rough number of entries
within a Database{} by defining it as the length
of the slices.
 */
@interface GomobileDatabaseStats : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long blockRange;
@property (nonatomic) long bookmark;
@property (nonatomic) long location;
@property (nonatomic) long note;
@property (nonatomic) long tag;
@property (nonatomic) long tagMap;
@property (nonatomic) long userMark;
@end

/**
 * DatabaseWrapper wraps the left, right, and merged
Database structs so they can be used with Gomobile.
 */
@interface GomobileDatabaseWrapper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * DBIsLoaded indicates if a DB on the given side has been loaded.
 */
- (BOOL)dbIsLoaded:(NSString* _Nullable)side;
/**
 * ExportMerged exports the merged database to filename.
 */
- (BOOL)exportMerged:(NSString* _Nullable)filename error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportJWLBackup imports a .jwlibrary backup file into the struct
on the given side.
 */
- (BOOL)importJWLBackup:(NSString* _Nullable)filename side:(NSString* _Nullable)side error:(NSError* _Nullable* _Nullable)error;
/**
 * Init initializes the DatabaseWrapper to prepare for subsequent
function calls. Should be called after ImportJWLBackup.
 */
- (void)init_;
/**
 * MergeBookmarks merges bookmarks
 */
- (BOOL)mergeBookmarks:(NSString* _Nullable)conflictSolver mcw:(GomobileMergeConflictsWrapper* _Nullable)mcw error:(NSError* _Nullable* _Nullable)error;
/**
 * MergeLocations merges locations
 */
- (BOOL)mergeLocations:(NSError* _Nullable* _Nullable)error;
/**
 * MergeNotes merges notes
 */
- (BOOL)mergeNotes:(NSString* _Nullable)conflictSolver mcw:(GomobileMergeConflictsWrapper* _Nullable)mcw error:(NSError* _Nullable* _Nullable)error;
/**
 * MergeTagMaps merges tagMaps
 */
- (BOOL)mergeTagMaps:(NSError* _Nullable* _Nullable)error;
/**
 * MergeTags merges tags
 */
- (BOOL)mergeTags:(NSError* _Nullable* _Nullable)error;
/**
 * MergeUserMarkAndBlockRange merges UserMarks and BlockRanges
 */
- (BOOL)mergeUserMarkAndBlockRange:(NSString* _Nullable)conflictSolver mcw:(GomobileMergeConflictsWrapper* _Nullable)mcw error:(NSError* _Nullable* _Nullable)error;
/**
 * Stats generates a DatabaseStats for the given mergeSide
 */
- (GomobileDatabaseStats* _Nullable)stats:(NSString* _Nullable)side;
@end

/**
 * MergeConflict represents two Models that collide. It is equvalent
to merger.MergeConflict, but represents the Models as strings
to make it compatible with Gomobile.
 */
@interface GomobileMergeConflict : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull left;
@property (nonatomic) NSString* _Nonnull right;
@end

/**
 * MergeConflictError indicates that a conflict happened while merging. It
is equivalent to merger.MergeConflictError, but does not contain the
actual conflicts to make it compatible with Gomobile.
 */
@interface GomobileMergeConflictError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull err;
- (NSString* _Nonnull)error;
@end

/**
 * MergeConflictsWrapper wraps mergeConflicts and their solutions
 */
@interface GomobileMergeConflictsWrapper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) GomobileDatabaseWrapper* _Nullable dbWrapper;
/**
 * ConflictsLen returns the length of the conflicts map.
 */
- (long)conflictsLen;
/**
 * GetConflict returns the conflict at index
 */
- (GomobileMergeConflict* _Nullable)getConflict:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNextConflictIndex returns the next conflict index, for which
the conflict is not solved yet. If there are none left, it returns
-1 indicating that all conflicts have been solved.
 */
- (long)getNextConflictIndex;
/**
 * InitDBWrapper initializes the DatabaseWrapper for the MergeConflictsWrapper
so the DB is accessible for pretty printing.
 */
- (void)initDBWrapper:(GomobileDatabaseWrapper* _Nullable)dbw;
/**
 * SolutionsLen returns the length of the solutions slice
 */
- (long)solutionsLen;
/**
 * SolveConflict solves a mergeConflict by choosing the given side at index.
Index must be less or equal to GetNextConflictIndex(), to ensure that
conflicts are solved in order and none are missed.
 */
- (BOOL)solveConflict:(long)index side:(NSString* _Nullable)side error:(NSError* _Nullable* _Nullable)error;
@end

#endif
